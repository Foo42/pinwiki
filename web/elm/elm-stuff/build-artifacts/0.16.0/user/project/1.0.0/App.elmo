Elm.App = Elm.App || {};
Elm.App.make = function (_elm) {
   "use strict";
   _elm.App = _elm.App || {};
   if (_elm.App.values) return _elm.App.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var placeholderView = function (maybe) {
      var _p0 = maybe;
      if (_p0.ctor === "Just") {
            var _p1 = _p0._0;
            return A2($Html.div,
            _U.list([$Html$Attributes.$class("placeholder item")
                    ,$Html$Attributes.style(_U.list([{ctor: "_Tuple2"
                                                     ,_0: "position"
                                                     ,_1: "absolute"}
                                                    ,{ctor: "_Tuple2",_0: "top",_1: $Basics.toString(_p1.x)}
                                                    ,{ctor: "_Tuple2",_0: "left",_1: $Basics.toString(_p1.y)}]))]),
            _U.list([$Html.text("placeholder")]));
         } else {
            return $Html.text("click");
         }
   };
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("board")
              ,$Html$Attributes.style(_U.list([{ctor: "_Tuple2"
                                               ,_0: "position"
                                               ,_1: "relative"}]))]),
      _U.list([placeholderView(model.placeholder)]));
   });
   var update = F2(function (action,model) {
      var _p2 = action;
      if (_p2.ctor === "NoOp") {
            return model;
         } else {
            return model;
         }
   });
   var ShowPlaceholder = function (a) {
      return {ctor: "ShowPlaceholder",_0: a};
   };
   var NoOp = {ctor: "NoOp"};
   var actions = $Signal.mailbox(NoOp);
   var emptyModel = {items: _U.list([])
                    ,nextuid: 1
                    ,placeholder: $Maybe.Nothing};
   var initialModel = emptyModel;
   var model = A3($Signal.foldp,
   update,
   initialModel,
   actions.signal);
   var main = A2($Signal.map,view(actions.address),model);
   var Position = F2(function (a,b) {    return {x: a,y: b};});
   var Item = F3(function (a,b,c) {
      return {definition: a,position: b,uid: c};
   });
   var Model = F3(function (a,b,c) {
      return {items: a,nextuid: b,placeholder: c};
   });
   return _elm.App.values = {_op: _op
                            ,Model: Model
                            ,Item: Item
                            ,Position: Position
                            ,initialModel: initialModel
                            ,emptyModel: emptyModel
                            ,NoOp: NoOp
                            ,ShowPlaceholder: ShowPlaceholder
                            ,update: update
                            ,view: view
                            ,placeholderView: placeholderView
                            ,main: main
                            ,model: model
                            ,actions: actions};
};