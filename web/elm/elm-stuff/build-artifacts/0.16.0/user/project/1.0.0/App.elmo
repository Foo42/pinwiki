Elm.App = Elm.App || {};
Elm.App.make = function (_elm) {
   "use strict";
   _elm.App = _elm.App || {};
   if (_elm.App.values) return _elm.App.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var toPxString = function (pos) {
      return A2($Basics._op["++"],$Basics.toString(pos),"px");
   };
   var placeholderView = function (maybe) {
      var _p0 = maybe;
      if (_p0.ctor === "Just") {
            var _p1 = _p0._0;
            return A2($Html.div,
            _U.list([$Html$Attributes.$class("placeholder item")
                    ,$Html$Attributes.style(_U.list([{ctor: "_Tuple2"
                                                     ,_0: "position"
                                                     ,_1: "absolute"}
                                                    ,{ctor: "_Tuple2",_0: "top",_1: toPxString(_p1.y)}
                                                    ,{ctor: "_Tuple2",_0: "left",_1: toPxString(_p1.x)}]))]),
            _U.list([$Html.text("placeholder")]));
         } else {
            return $Html.text("click");
         }
   };
   var update = F2(function (action,model) {
      var _p2 = action;
      if (_p2.ctor === "NoOp") {
            return model;
         } else {
            return _U.update(model,{placeholder: $Maybe.Just(_p2._0)});
         }
   });
   var ShowPlaceholder = function (a) {
      return {ctor: "ShowPlaceholder",_0: a};
   };
   var NoOp = {ctor: "NoOp"};
   var actions = $Signal.mailbox(NoOp);
   var emptyModel = {items: _U.list([])
                    ,nextuid: 1
                    ,placeholder: $Maybe.Nothing
                    ,bottomRight: {x: 1000,y: 1000}};
   var initialModel = emptyModel;
   var model = A3($Signal.foldp,
   update,
   initialModel,
   actions.signal);
   var Position = F2(function (a,b) {    return {x: a,y: b};});
   var eventPos = A3($Json$Decode.object2,
   Position,
   A2($Json$Decode._op[":="],"clientX",$Json$Decode.$int),
   A2($Json$Decode._op[":="],"clientY",$Json$Decode.$int));
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("board")
              ,$Html$Attributes.style(_U.list([{ctor: "_Tuple2"
                                               ,_0: "position"
                                               ,_1: "relative"}
                                              ,{ctor: "_Tuple2",_0: "background-color",_1: "whitesmoke"}
                                              ,{ctor: "_Tuple2"
                                               ,_0: "width"
                                               ,_1: A2($Basics._op["++"],
                                               $Basics.toString(model.bottomRight.x),
                                               "px")}
                                              ,{ctor: "_Tuple2"
                                               ,_0: "height"
                                               ,_1: A2($Basics._op["++"],
                                               $Basics.toString(model.bottomRight.y),
                                               "px")}]))
              ,A3($Html$Events.on,
              "click",
              eventPos,
              function (_p3) {
                 return A2($Signal.message,address,ShowPlaceholder(_p3));
              })]),
      _U.list([placeholderView(model.placeholder)]));
   });
   var main = A2($Signal.map,view(actions.address),model);
   var Item = F3(function (a,b,c) {
      return {definition: a,position: b,uid: c};
   });
   var Model = F4(function (a,b,c,d) {
      return {items: a,nextuid: b,bottomRight: c,placeholder: d};
   });
   return _elm.App.values = {_op: _op
                            ,Model: Model
                            ,Item: Item
                            ,Position: Position
                            ,initialModel: initialModel
                            ,emptyModel: emptyModel
                            ,NoOp: NoOp
                            ,ShowPlaceholder: ShowPlaceholder
                            ,update: update
                            ,view: view
                            ,placeholderView: placeholderView
                            ,toPxString: toPxString
                            ,main: main
                            ,model: model
                            ,actions: actions
                            ,eventPos: eventPos};
};